import argparse
import pandas as pd
import gzip


def read_fas(fh):
    """takes fh and reads fasta file, returns just a list of sequences, don't care for headers"""
    first = True
    seq_list = []
    tmp_seq = []
    for line in fh:
        if first:
            first=False
            continue
        if line[0] == ">":
            seq_list.append(".".join(tmp_seq))
            tmp_seq = []
            continue
        tmp_seq.append(line.rstrip().lower())
    seq_list.append(".".join(tmp_seq))
    return seq_list


def get_degeneracy_cds(seq, chrom, start, end, strand, rf, over, out, codon_table):
    """
    takes exon dna sequence, start and end coordinates, strand, reading frame and overhanging sequence and writes degeneracy to file 
"""
    # gff is 1-indexed and end is included, bed is 0-indexed and end not included
    if strand == "+":
        starts = list(range(start-1,end))
        ends = list(range(start,end+1))
    elif strand == "-": # in reverse strand, the last ones are the first ones. we assume sequence is already reverse complement
        starts = list(range(end-1, start-2, -1))
        ends = list(range(end, start-1, -1))
    degeneracies = ""
    # when reading_frame is not 0, use previous exon ending to see degeneracy of first positons
    if rf > 0:
        codon = over + seq[0:rf]
        if len(codon) != 3:
            print("made codon with length",len(codon),"in entry", c, "something is wrong and will exit")
            exit(1)
        degeneracies += ("00"+codon_table[codon])[(3-rf):]
#        print("with rf", rf, "will add", ("00"+codon_table[codon])[3-rf:], "to beginning")
    orf = seq[rf:] # take codons
    codons = [orf[i:i+3] for i in range(0, len(orf), 3)]
    for codon in codons:
        if len(codon)==3:
            degeneracies += "00"+codon_table[codon]
        else:
            degeneracies += "0" * len(codon)
    if not len(starts) == len(ends) == len(degeneracies):
        print("number of positon does not match number of degeneracies for entry", c, "will exit")
        exit(1)
    for i in range(0, len(degeneracies)):
#        try:
        out.write("{0}\t{1}\t{2}\t{3}\n".format(chrom, starts[i], ends[i], degeneracies[i]))
        #except IndexError:
         #   print("index error in entry", c, "will exit")
          #  exit(1)


parser = argparse.ArgumentParser(description='Arguments to split coding positons by degeneracy.')

parser.add_argument('-g', '--gff', metavar='INPUT-FILE', help='gff/gff3 file containging only CDS')
parser.add_argument('-f', '--fasta', metavar='INPUT-FILE', help= 'fasta file with codons from CDS, generated by bedtools getfasta from gff file with -s flag (so will use strand informaiton)')
parser.add_argument('-o', '--output', metavar='OUTPUT-FILE', help= 'name for output bed file where positions will be classified by degeneracy, will be 4 columns: chr strart end degeneracy', default='degeneracy.bed')

args = parser.parse_args()

gff_file = args.gff
fas_file = args.fasta
outfile = args.output

### make dict classify codons by degeneracy of third positon (adapted from https://www.biostars.org/p/157527/; genetic code from https://www.cs.mcgill.ca/~rwest/wikispeedia/wpcd/wp/g/Genetic_code.htm)
# definition is: if any mutation keeps same aa -> 4-fold; if a transition keeps same aa -> 2-fold; else 0-fold
# this means ATA is 0-fold even though it woudl strictly be 3-fold since ATT and ATC code for same (Isoleucine), but it's 0-fold because a trnasition makes ATG that is Methionine
# also ignores any potential degeneracy in first or second positon
bases = ["t", "c", "a", "g"]
codons = [a+b+c for a in bases for b in bases for c in bases]
degeneracy = "2222444422222200444444442222444422004444222222224444444422224444"
codon_table = dict(zip(codons, degeneracy))



# read gff file as pandas data frame
gff = pd.read_table(gff_file, header=None, names=["chrom", "db", "type", "start", "end", "idk", "strand", "reading_frame", "annotation"])

# read fasta file as list of sequences
if fas_file[-2:] == "gz":
    with gzip.open(fas_file, "r") as fh:
        seq_list = read_fas(fh)
else:
    with open(fas_file, "r") as fh:
        seq_list = read_fas(fh)

# check gff file and fasta file has same number of entries
if not gff.shape[0]==len(seq_list):
    print("Number of entries in fasta and gff files differ, will exit")
    exit(1)

# open file to write output
out = open(outfile, "w")


for c in range(gff.shape[0]):
    leftover = ""
    if gff.reading_frame[c] > 0:
        leftover = seq_list[c-1][-(3-gff.reading_frame[c]):] 
    get_degeneracy_cds(seq_list[c], gff.chrom[c], gff.start[c], gff.end[c], gff.strand[c], gff.reading_frame[c], leftover, out, codon_table)

out.close()
